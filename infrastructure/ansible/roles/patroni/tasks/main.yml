---
- name: Installer les paquets système requis
  yum:
    name:
      - epel-release
      - gcc
      - python3
      - python3-pip
      - python3-devel
      - libpq-devel
      - sudo
      - curl
      - jq
    state: present

- name: Télécharger le dépôt PGDG si absent
  stat:
    path: /tmp/pgdg-redhat-repo-latest.noarch.rpm
  register: pgdg_rpm

- name: Télécharger le dépôt PGDG
  get_url:
    url: https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    dest: /tmp/pgdg-redhat-repo-latest.noarch.rpm
  when: not pgdg_rpm.stat.exists

- name: Installer le dépôt PGDG
  command: dnf install -y --nogpgcheck /tmp/pgdg-redhat-repo-latest.noarch.rpm
  register: _pgdg_install
  changed_when: _pgdg_install.rc == 0

- name: Check if PostgreSQL AppStream module is enabled
  command: dnf module list postgresql
  register: _pg_module_list
  failed_when: false
  changed_when: false

- name: Decide if PostgreSQL AppStream module appears enabled
  set_fact:
    pg_module_enabled: >-
      {{ (_pg_module_list.stdout | default('') + '\n' + (_pg_module_list.stderr | default(''))) 
         is search('postgresql.*\\[[[:alpha:]]\\]') }}

- name: Debug module state
  debug:
    msg:
      - "dnf rc={{ _pg_module_list.rc }}"
      - "pg_module_enabled={{ pg_module_enabled }}"

- name: Disable AppStream PostgreSQL module if present (safe)
  command: dnf -qy module disable postgresql
  when: pg_module_enabled
  register: module_disable_result
  failed_when: false
  changed_when: module_disable_result.rc == 0
  
  
- name: Installer PostgreSQL 16 depuis PGDG
  yum:
    name:
      - postgresql16
      - postgresql16-server
      - postgresql16-contrib
    state: present

- name: Créer le répertoire data PostgreSQL si manquant
  file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
    recurse: yes

- name: Créer un virtualenv Python pour Patroni
  command: python3 -m venv /opt/patroni-venv
  args:
    creates: /opt/patroni-venv

- name: Mettre à jour pip, setuptools et wheel
  pip:
    virtualenv: /opt/patroni-venv
    name:
      - pip
      - setuptools
      - wheel
    state: latest

- name: Installer Patroni et ses dépendances
  pip:
    virtualenv: /opt/patroni-venv
    name:
      - patroni
      - psycopg2-binary
      - python-etcd

- name: Rendre patronictl accessible globalement
  file:
    src: /opt/patroni-venv/bin/patronictl
    dest: /usr/local/bin/patronictl
    state: link
    force: yes

- name: Vérifier que psycopg2 est bien installé
  command: /opt/patroni-venv/bin/python -c "import psycopg2"
  register: psycopg_check
  failed_when: psycopg_check.rc != 0

- name: Déployer le fichier de configuration Patroni
  template:
    src: patroni.yml.j2
    dest: /etc/patroni.yml
    mode: '0644'
  notify: Reload systemd

- name: Déployer le service systemd de Patroni
  template:
    src: patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    mode: '0644'
  notify: Reload systemd

- name: Vérifier si le data_dir PostgreSQL est présent
  stat:
    path: "{{ pg_data_dir }}"
  register: pg_data_dir_stat

- name: Vérifier la taille du data_dir
  command: du -s {{ pg_data_dir }} | cut -f1
  register: pg_data_dir_du
  when: pg_data_dir_stat.stat.exists and pg_data_dir_stat.stat.isdir
  changed_when: false
  failed_when: false

- name: Obtenir system_id local via pg_controldata si possible
  command: "{{ pg_bin_dir }}/pg_controldata {{ pg_data_dir }} | grep 'Database system identifier' | awk '{print $4}'"
  register: local_sysid
  failed_when: false
  changed_when: false
  when:
    - pg_data_dir_stat.stat.exists
    - pg_data_dir_stat.stat.isdir
    - pg_data_dir_du.stdout is defined
    - pg_data_dir_du.stdout | int > 0
  become: true
  become_user: postgres

- name: Obtenir system_id du leader via pg_controldata (délégué au leader)
  vars:
    leader_host: "{{ groups['patroni'][0] }}"
    leader_data_dir: "{{ hostvars[ leader_host ]['pg_data_dir'] | default(pg_data_dir) }}"
    leader_bin_dir: "{{ hostvars[ leader_host ]['pg_bin_dir'] | default(pg_bin_dir) }}"
  command: "{{ leader_bin_dir }}/pg_controldata {{ leader_data_dir }} | grep 'Database system identifier' | awk '{print $4}'"
  delegate_to: "{{ leader_host }}"
  register: leader_sysid
  failed_when: false
  changed_when: false
  become: true
  become_user: postgres

- name: Debug system ids
  debug:
    msg:
      - "local_sysid={{ local_sysid.stdout | default('undefined') }}"
      - "leader_sysid={{ leader_sysid.stdout | default('undefined') }}"

- name: Purger le data_dir si system_id mismatch (sécurisé)
  file:
    path: "{{ pg_data_dir }}"
    state: absent
  become: true
  when:
    - inventory_hostname != groups['patroni'][0]
    - local_sysid.stdout is defined
    - leader_sysid.stdout is defined
    - local_sysid.stdout != leader_sysid.stdout

- name: Recréer proprement le data_dir après purge
  file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  become: true
  when:
    - inventory_hostname != groups['patroni'][0]
    - local_sysid.stdout is defined
    - leader_sysid.stdout is defined
    - local_sysid.stdout != leader_sysid.stdout

- name: Initialiser PostgreSQL si data_dir vide et nœud bootstrap
  become: true
  become_user: postgres
  command: "{{ pg_bin_dir }}/initdb -D {{ pg_data_dir }}"
  when:
    - inventory_hostname == groups['patroni'][0]
    - pg_data_dir_stat.stat.exists
    - pg_data_dir_stat.stat.isdir
    - pg_data_dir_du.stdout is defined
    - pg_data_dir_du.stdout | int == 0
  register: initdb_result
  changed_when: initdb_result.rc == 0

- name: S'assurer que le data_dir appartient à postgres
  file:
    path: "{{ pg_data_dir }}"
    owner: postgres
    group: postgres
    recurse: yes
  become: true

- name: Activer Patroni au démarrage
  systemd:
    name: patroni
    enabled: yes

- name: Recharger systemd et démarrer Patroni
  systemd:
    name: patroni
    daemon_reload: yes
    state: started
  register: patroni_start

- name: Attendre le démarrage du REST API de Patroni
  uri:
    url: "http://{{ ansible_host }}:{{ patroni_rest_port | default(8008) }}/patroni"
    method: GET
    status_code: 200
    return_content: no
  register: patroni_api
  retries: 12
  delay: 5
  until: patroni_api.status == 200
  when: patroni_start is defined and patroni_start.changed

- name: Ajouter les nœuds replicas dans pg_hba.conf
  lineinfile:
    path: "{{ pg_data_dir }}/pg_hba.conf"
    line: "host replication {{ replication_user }} {{ hostvars[item]['ansible_host'] }}/32 md5"
    insertafter: '^#.*TYPE.*DATABASE.*USER.*ADDRESS.*METHOD'
    state: present
  loop: "{{ groups['patroni'] | difference([inventory_hostname]) }}"
  notify: Restart Patroni

- name: Recharger la configuration PostgreSQL via patronictl
  command: /usr/local/bin/patronictl -c /etc/patroni.yml reload
  register: patronictl_reload
  failed_when: false
  changed_when: false
  when:
    - patroni_api is defined
    - patroni_api is mapping
    - "'status' in patroni_api"
    - patroni_api.status == 200

- name: Attendre qu'un leader soit élu
  command: /usr/local/bin/patronictl -c /etc/patroni.yml list --format json
  register: patroni_list
  retries: 10
  delay: 6
  until: patroni_list.stdout is defined and "'Leader'" in patroni_list.stdout
  failed_when: false
  changed_when: false
  
  
- name: Ensure required packages are installed
  package:
    name:
      - keepalived
      - curl
      - jq
    state: present

- name: Create keepalived config directory
  file:
    path: /etc/keepalived
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Deploy keepalived configuration
  template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
    owner: root
    group: root
    force: yes
    mode: '0644'
  notify: Restart keepalived

- name: Deploy Patroni health check script for Keepalived
  template:
    src: check_patroni_health.sh.j2
    dest: /usr/local/bin/check_patroni_health.sh
    owner: root
    group: root
    force: yes
    mode: '0755'
  notify: Restart keepalived

- name: Ensure keepalived service enabled and started
  systemd:
    name: keepalived
    enabled: yes
    state: started
  register: keepalived_started

- name: Wait for VIP to appear on interface
  command: ip addr show dev {{ keepalived_interface }}
  register: ip_dev
  retries: 10
  delay: 3
  until: ip_dev.stdout is defined
  changed_when: false
  failed_when: false
  when: keepalived_started is defined
  

- name: Afficher l’état du cluster Patroni
  command: /usr/local/bin/patronictl -c /etc/patroni.yml list
  register: patroni_summary
  changed_when: false
  failed_when: false

- name: Debug état du cluster
  debug:
    var: patroni_summary.stdout_lines