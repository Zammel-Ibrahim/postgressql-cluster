---
- name: Installer les paquets système requis
  yum:
    name:
      - epel-release
      - gcc
      - python3
      - python3-pip
      - python3-devel
      - libpq-devel
      - sudo
      - curl
      - jq
    state: present

- name: Télécharger le dépôt PGDG si absent
  stat:
    path: /tmp/pgdg-redhat-repo-latest.noarch.rpm
  register: pgdg_rpm

- name: Télécharger le dépôt PGDG
  get_url:
    url: https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    dest: /tmp/pgdg-redhat-repo-latest.noarch.rpm
  when: not pgdg_rpm.stat.exists

- name: Installer le dépôt PGDG
  command: dnf install -y --nogpgcheck /tmp/pgdg-redhat-repo-latest.noarch.rpm
  register: _pgdg_install
  changed_when: _pgdg_install.rc == 0

- name: Vérifier si le module PostgreSQL est déjà désactivé
  shell: dnf module list postgresql | grep -q '^postgresql.*\[d\]'
  register: pg_module_disabled
  failed_when: false
  changed_when: false

- name: Désactiver le module AppStream PostgreSQL
  shell: dnf -qy module disable postgresql
  args:
    warn: false
  when: not pg_module_disabled.rc == 0

- name: Installer PostgreSQL 16 depuis PGDG
  yum:
    name:
      - postgresql16
      - postgresql16-server
      - postgresql16-contrib
    state: present

- name: Créer le répertoire data PostgreSQL si manquant
  file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
    recurse: yes

- name: Créer un virtualenv Python pour Patroni
  command: python3 -m venv /opt/patroni-venv
  args:
    creates: /opt/patroni-venv

- name: Mettre à jour pip, setuptools et wheel
  pip:
    virtualenv: /opt/patroni-venv
    name:
      - pip
      - setuptools
      - wheel
    state: latest

- name: Installer Patroni et ses dépendances
  pip:
    virtualenv: /opt/patroni-venv
    name:
      - patroni
      - psycopg2-binary
      - python-etcd

- name: Rendre patronictl accessible globalement
  file:
    src: /opt/patroni-venv/bin/patronictl
    dest: /usr/local/bin/patronictl
    state: link
    force: yes

- name: Vérifier que psycopg2 est bien installé
  command: /opt/patroni-venv/bin/python -c "import psycopg2"
  register: psycopg_check
  failed_when: psycopg_check.rc != 0

- name: Déployer le fichier de configuration Patroni
  template:
    src: patroni.yml.j2
    dest: /etc/patroni.yml
    mode: '0644'
  notify: Reload systemd

- name: Déployer le service systemd de Patroni
  template:
    src: patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    mode: '0644'
  notify: Reload systemd

- name: Vérifier si le data_dir PostgreSQL est présent
  stat:
    path: "{{ pg_data_dir }}"
  register: pg_data_dir_stat

- name: Vérifier la taille du data_dir
  command: du -s {{ pg_data_dir }} | cut -f1
  register: pg_data_dir_du
  when: pg_data_dir_stat.stat.exists and pg_data_dir_stat.stat.isdir
  changed_when: false
  failed_when: false

- name: Nettoyer le data_dir si non bootstrap et data existante
  shell: rm -rf {{ pg_data_dir }}/*
  become: true
  become_user: postgres
  when:
    - inventory_hostname != groups['patroni'][0]
    - pg_data_dir_stat.stat.exists
    - pg_data_dir_stat.stat.isdir
    - pg_data_dir_du.stdout is defined
    - pg_data_dir_du.stdout | int > 0

- name: Initialiser PostgreSQL si data_dir vide et nœud bootstrap
  become: true
  become_user: postgres
  command: "{{ pg_bin_dir }}/initdb -D {{ pg_data_dir }}"
  when:
    - inventory_hostname == groups['patroni'][0]
    - pg_data_dir_stat.stat.exists
    - pg_data_dir_stat.stat.isdir
    - pg_data_dir_du.stdout is defined
    - pg_data_dir_du.stdout | int == 0
  register: initdb_result
  changed_when: initdb_result.rc == 0

- name: S'assurer que le data_dir appartient à postgres
  file:
    path: "{{ pg_data_dir }}"
    owner: postgres
    group: postgres
    recurse: yes

- name: Activer Patroni au démarrage
  systemd:
    name: patroni
    enabled: yes

- name: Recharger systemd et démarrer Patroni
  systemd:
    name: patroni
    daemon_reload: yes
    state: started
  register: patroni_start

- name: Attendre le démarrage du REST API de Patroni
  uri:
    url: "http://{{ ansible_host }}:8008/patroni"
    method: GET
    status_code: 200
    return_content: no
  register: patroni_api
  retries: 12
  delay: 5
  until: patroni_api.status == 200
  when: patroni_start is defined and patroni_start.changed

- name: Ajouter les nœuds replicas dans pg_hba.conf
  lineinfile:
    path: "{{ pg_data_dir }}/pg_hba.conf"
    line: "host replication {{ replication_user }} {{ hostvars[item]['ansible_host'] }}/32 md5"
    insertafter: '^#.*TYPE.*DATABASE.*USER.*ADDRESS.*METHOD'
    state: present
  loop: "{{ groups['patroni'] | difference([inventory_hostname]) }}"
  notify: Restart Patroni

- name: Recharger la configuration PostgreSQL via patronictl
  command: /usr/local/bin/patronictl -c /etc/patroni.yml reload
  register: patronictl_reload
  failed_when: false
  changed_when: false
  when:
    - patroni_api is defined
    - patroni_api is mapping
    - "'status' in patroni_api"
    - patroni_api.status == 200

- name: Attendre qu'un leader soit élu
  command: /usr/local/bin/patronictl -c /etc/patroni.yml list --format json
  register: patroni_list
  retries: 10
  delay: 6
  until: patroni_list.stdout is defined and "'Leader'" in patroni_list.stdout
  failed_when: false
  changed_when: false

- name: Afficher l’état du cluster Patroni
  command: /usr/local/bin/patronictl -c /etc/patroni.yml list
  register: patroni_summary
  changed_when: false
  failed_when: false

- name: Debug état du cluster
  debug:
    var: patroni_summary.stdout_lines